services:
  miko-stock-automation-backend-go:
    image: miko-stock-automation-backend-go
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: 1
    storage_opt:
      size: 5G
    build:
      context: ./
      dockerfile: Dockerfile_gateway
    container_name: miko-stock_automation_backend_go_container  
    ports:
      - "8081:8081"
    environment:
      - TZ=Asia/Kolkata
      - PORT=8081
      - SECRET_KEY=SECRET_KEY
      - PG_HOST=miko-stock-automation-postgres
      - REDIS_HOST=miko-stock-automation-redis
      - PROTOCOL=http
      - SECRET_PATH=/run/secrets/secret.json
      - REFRESH_SECRET_KEY=REFRESH_SECRET_KEY
      - API_KEY=API_KEY
      - DB_USER=DB_USER
      - DB_PASSWORD=DB_PASSWORD
      - REDIS_USER=REDIS_USER
      - REDIS_PASSWORD=REDIS_PASSWORD
      - DB_NAME=DB_NAME
      - FRONTEND_PROTOCOL=http
      - FRONTEND_CLIENT=localhost
      - FRONTEND_PORT=80
      - DB_PORT=5432
      - REDIS_PORT=6379
      - JOB_TIME_HOUR=12
      - JOB_TIME_MINUTE=0
      - JOB_TIME_SECOND=0    
      - JOB_TIME_HOUR_FREQUENCY=24
      - JOB_TIME_MINUTE_FREQUENCY=0
      - JOB_TIME_SECOND_FREQUENCY=0
    # secrets:
    #   - backend-secretkey
    #   - postgres-user
    #   - postgres-password
    networks:
      miko-logistics_network:

    depends_on:
      - miko-stock-automation-postgres
      - miko-stock-automation-redis

  miko-stock-automation-postgres:
    image: miko-stock-automation-postgres
    build:
      context: ./
      dockerfile: dockerfile_postgres
    # image: postgres:16.6
    deploy:
      resources:
        limits:
          memory: 500mb
          cpus: 0.5
    storage_opt:
      size: 5G
    container_name: miko-stock_automation_postgres_container
    environment:
      - POSTGRES_USER=DB_USER
      - POSTGRES_PASSWORD=DB_PASSWORD
      - TZ=Asia/Kolkata
    # secrets:
    #   - postgres-user
    #   - postgres-password
    ports:
      - "5432:5432"
    # entrypoint: ["/bin/bash", "-c"]
    # command: 
    # -  |        
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./data/pg_dump/dump0205.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      miko-logistics_network:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 15s
      retries: 3
      
  miko-stock-automation-redis:
    image: miko-stock-automation-redis
    build:
      context: ./
      dockerfile: dockerfile_redis
    deploy:
      resources:
        limits:
          memory: 500mb
          cpus: 0.5
    storage_opt:
      size: 5G
    container_name: miko-stock_automation_redis_container
    environment:
      - TZ=Asia/Kolkata
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      miko-logistics_network:
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 15s
      retries: 3

# secrets:
#   postgres-user:
#     file: ./data/secrets/secret.json
#   postgres-password:
#     file: ./data/secrets/secret.json

volumes:
  postgres_data:
  redis_data:

networks:
  miko-logistics_network:
    name: miko-logistics_network  
